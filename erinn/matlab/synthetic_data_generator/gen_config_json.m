function gen_config_json(varargin)
% Except read_block, other cores didn't add to package.


% define default value
default_json = 'config.json';
default_urf = 'geo.urf';
defalut_array = 'CPP';
default_core = 'rand_block';
default_pdf = 'log10_uniform';

% define validation function
json_expr = '\.json\>'; % end with .json
valid_json = @(x) regexp(x, json_expr);
urf_expr = '\.urf\>'; % end with .urf
valid_urf = @(x) regexp(x, urf_expr);
arrays = {'CPP', 'Wenner', 'Wenner_Schlumberger'};
error_msg = strcat('The array must be one of', ...
                ' "CPP", "Wenner", "Wenner_Schlumberger"');
valid_array = @(x) assert(ismember(x, arrays), error_msg);

% parse input arguments
p = inputParser;
addParameter(p, 'output_json', default_json, valid_json);
addParameter(p, 'urf', default_urf, valid_urf);
addParameter(p, 'array_type', defalut_array, valid_array);
addParameter(p, 'core', default_core, @(x) ischar(x));
addParameter(p, 'pdf', default_pdf, @(x) ischar(x));
parse(p, varargin{:});

% assign results
output_json = p.Results.output_json;
urf = p.Results.urf;
array_type = p.Results.array_type;
core = p.Results.core;
pdf = p.Results.pdf;

switch core
    case 'rand_block'
        if strcmp(pdf, 'lognormal')
            gen_para = struct('core', 'rand_block', ...
                'samples', 500, ...
                'mu', log(250), ...
                'std', log(3.1), ...
                'block_x_min', 3, ...
                'block_x_max', 50, ...
                'block_z_min', 3, ...
                'block_z_max', 30);
        elseif strcmp(pdf, 'log10_uniform')
            gen_para = struct('core', 'rand_block', ...
                'samples', 500, ...
                'lower_bound', -2, ...
                'upper_bound', 5, ...
                'block_x_min', 3, ...
                'block_x_max', 50, ...
                'block_z_min', 3, ...
                'block_z_max', 30);
        else
            warning('Unexpected pdf. Use default log10_uniform distribution.')
            gen_para = struct('core', 'rand_block', ...
                'samples', 500, ...
                'lower_bound', -2, ...
                'upper_bound', 5, ...
                'block_x_min', 3, ...
                'block_x_max', 50, ...
                'block_z_min', 3, ...
                'block_z_max', 30);
        end
    case 'rand_layer'
        gen_para = struct('core', 'rand_layer', ...
            'samples', 500, ...
            'mu', log(250), ...
            'std', log(3.1), ...
            'block_x_min', 3, ...
            'block_x_max', 50, ...
            'block_z_min', 3, ...
            'block_z_max', 50);
    case 'rand_column'
        gen_para = struct('core', 'rand_column', ...
            'samples', 500, ...
            'mu', log(250), ...
            'std', log(3.1), ...
            'block_x_min', 3, ...
            'block_x_max', 50, ...
            'block_z_min', 3, ...
            'block_z_max', 50);
    otherwise
        warning('Unexpected random generator core. Use default rand_block.')
        gen_para = struct('core', 'rand_block', ...
            'samples', 500, ...
            'mu', log(250), ...
            'std', log(3.1), ...
            'block_x_min', 3, ...
            'block_x_max', 50, ...
            'block_z_min', 3, ...
            'block_z_max', 30);
end

simu_para = struct('geometry_urf', urf, ...
                   'array_type', array_type, ...
                   'Para_mat', fullfile('..', 'config', 'fw2_5D_para.mat'));

               
Struct = struct('output_path', fullfile('..', 'data', 'synthetic_data'), ...
                'nx', 140, ...
                'nz', 30, ...
                'simulate', simu_para, ...
                'generator', gen_para);

jsonStr = jsonencode(Struct);

% [folder, basename, extension] = fileparts(output_json);
[folder, ~, ~] = fileparts(output_json);
if ~exist(folder, 'dir')
    mkdir(folder);
end

fid = fopen(output_json, 'w');
if fid == -1
    error('Cannot create JSON file');
end
fwrite(fid, jsonStr, 'char');
fclose(fid);

fprintf(strcat('Please check the parameters and\n', ...
    'adjust them to suit your field array and computer capacity.\n'));
        
